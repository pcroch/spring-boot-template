#server:
#  port: 8080
#
#spring:
#  properties:
#    hibernate:
#      globally_quoted_identifiers: true
#  datasource:
#    driverClassName: org.postgresql.Driver
#    url: jdbc:postgresql://localhost:5432/template-db
#    password: admin
#    username: admin
#    #    testOnBorrow: true
#    #    testWhileIdle: true
#    schema: template-schema
#  #    hikari:
#  #      maximum-pool-size: 5
#  #      idle-timeout: 600000
#  flyway:
#    defaultSchema: template-schema
#    baseline-on-migrate: true
#    enabled: true
#  jpa:
#    database-platform: org.hibernate.dialect.PostgreSQLDialect
#    # Hibernate ddl auto (create, create-drop, update): with "update" the database
#    # schema will be automatically updated accordingly to java entities found in
#    # the project
#    hibernate:
#      ddl-auto: update
#    #    show-sql: false
#    properties:
#      hibernate:
#        #        format_sql: false
#        default_schema: template-schema


server:
  port: 8080

spring:
  datasource:
    url: jdbc:h2:mem:testdb;DB_CLOSE_DELAY=-1;MODE=PostgreSQL
    username: admin
    password: admin
    driver-class-name: org.h2.Driver
  jpa:
    hibernate:
      ddl-auto: validate # Or update for quick development, but validate is safer for tests with Flyway
    properties:
      hibernate:
        format_sql: true
        use_sql_comments: true
        # For H2 to behave more like PostgreSQL (if your prod DB is Postgres)
        dialect: org.hibernate.dialect.PostgreSQLDialect
  flyway:
    enabled: true
    clean-disabled: false # Crucial for testing: allows flyway.clean()
    baseline-on-migrate: true # Useful if you're managing an existing schema
    # If your migration scripts are in a non-default location, specify here
    # locations: classpath:db/migration
